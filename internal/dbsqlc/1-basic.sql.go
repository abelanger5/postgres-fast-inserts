// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: 1-basic.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertTaskSingleton = `-- name: InsertTaskSingleton :one
INSERT INTO tasks (args, idempotency_key)
VALUES ($1, $2)
RETURNING id, created_at, args, idempotency_key
`

type InsertTaskSingletonParams struct {
	Args           []byte      `json:"args"`
	IdempotencyKey pgtype.Text `json:"idempotency_key"`
}

func (q *Queries) InsertTaskSingleton(ctx context.Context, db DBTX, arg InsertTaskSingletonParams) (*Task, error) {
	row := db.QueryRow(ctx, insertTaskSingleton, arg.Args, arg.IdempotencyKey)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Args,
		&i.IdempotencyKey,
	)
	return &i, err
}

type InsertTasksCopyFromParams struct {
	Args           []byte      `json:"args"`
	IdempotencyKey pgtype.Text `json:"idempotency_key"`
}

const insertTasksWithUnnest = `-- name: InsertTasksWithUnnest :many
WITH input AS (
    SELECT
        UNNEST($1::JSONB[]) AS args,
        UNNEST($2::TEXT[]) AS idempotency_key
)
INSERT INTO tasks (args, idempotency_key)
SELECT
    args,
    idempotency_key
FROM input
RETURNING id, created_at, args, idempotency_key
`

type InsertTasksWithUnnestParams struct {
	Args [][]byte `json:"args"`
	Keys []string `json:"keys"`
}

func (q *Queries) InsertTasksWithUnnest(ctx context.Context, db DBTX, arg InsertTasksWithUnnestParams) ([]*Task, error) {
	rows, err := db.Query(ctx, insertTasksWithUnnest, arg.Args, arg.Keys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Args,
			&i.IdempotencyKey,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
