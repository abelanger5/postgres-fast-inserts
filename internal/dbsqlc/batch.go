// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: batch.go

package dbsqlc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const insertTaskAssociatedDatasBatch = `-- name: InsertTaskAssociatedDatasBatch :batchone
INSERT INTO task_associated_data (task_id, top_level_fields)
VALUES ($1, extract_top_level_fields($2))
RETURNING task_id, top_level_fields
`

type InsertTaskAssociatedDatasBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InsertTaskAssociatedDatasBatchParams struct {
	TaskID   int64  `json:"task_id"`
	ArgsJson []byte `json:"args_json"`
}

func (q *Queries) InsertTaskAssociatedDatasBatch(ctx context.Context, db DBTX, arg []InsertTaskAssociatedDatasBatchParams) *InsertTaskAssociatedDatasBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.TaskID,
			a.ArgsJson,
		}
		batch.Queue(insertTaskAssociatedDatasBatch, vals...)
	}
	br := db.SendBatch(ctx, batch)
	return &InsertTaskAssociatedDatasBatchBatchResults{br, len(arg), false}
}

func (b *InsertTaskAssociatedDatasBatchBatchResults) QueryRow(f func(int, *TaskAssociatedDatum, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i TaskAssociatedDatum
		if b.closed {
			if f != nil {
				f(t, nil, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&i.TaskID, &i.TopLevelFields)
		if f != nil {
			f(t, &i, err)
		}
	}
}

func (b *InsertTaskAssociatedDatasBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const insertTasksBatch = `-- name: InsertTasksBatch :batchone
INSERT INTO tasks (args, idempotency_key)
VALUES ($1, $2)
RETURNING id, created_at, args, idempotency_key
`

type InsertTasksBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InsertTasksBatchParams struct {
	Args           []byte      `json:"args"`
	IdempotencyKey pgtype.Text `json:"idempotency_key"`
}

func (q *Queries) InsertTasksBatch(ctx context.Context, db DBTX, arg []InsertTasksBatchParams) *InsertTasksBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Args,
			a.IdempotencyKey,
		}
		batch.Queue(insertTasksBatch, vals...)
	}
	br := db.SendBatch(ctx, batch)
	return &InsertTasksBatchBatchResults{br, len(arg), false}
}

func (b *InsertTasksBatchBatchResults) QueryRow(f func(int, *Task, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i Task
		if b.closed {
			if f != nil {
				f(t, nil, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Args,
			&i.IdempotencyKey,
		)
		if f != nil {
			f(t, &i, err)
		}
	}
}

func (b *InsertTasksBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
